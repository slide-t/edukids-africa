const express = require("express");
const multer = require("multer");
const fs = require("fs");
const cors = require("cors");

const app = express();
const PORT = 5000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// âœ… Serve uploaded photos
app.use("/uploads", express.static("uploads"));

// Multer setup for photo uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, "uploads/"),
  filename: (req, file, cb) => cb(null, Date.now() + "-" + file.originalname)
});
const upload = multer({ storage });

// Path for saving registered students
const dataFile = "./students.json";

// Helper: Save to JSON
function saveStudent(student) {
  let students = [];
  if (fs.existsSync(dataFile)) {
    students = JSON.parse(fs.readFileSync(dataFile));
  }
  students.push(student);
  fs.writeFileSync(dataFile, JSON.stringify(students, null, 2));
}

// Registration endpoint
app.post("/register", upload.single("photo"), (req, res) => {
  const { fullname, dob, age, class: studentClass, emailType, email, countryOrigin, countryResidence } = req.body;

  const studentData = {
    fullname,
    dob,
    age,
    studentClass,
    email,
    emailType,
    countryOrigin,
    countryResidence,
    photo: req.file ? req.file.filename : null,
    dateRegistered: new Date()
  };

  saveStudent(studentData);
  res.json({ message: "âœ… Student registered successfully", student: studentData });
});

// âœ… Students API with search & pagination
app.get("/students", (req, res) => {
  if (!fs.existsSync(dataFile)) return res.json([]);

  let students = JSON.parse(fs.readFileSync(dataFile));

  // --- Search filter ---
  const { search, page = 1, limit = 10 } = req.query;
  if (search) {
    const lowerSearch = search.toLowerCase();
    students = students.filter(s =>
      (s.fullname && s.fullname.toLowerCase().includes(lowerSearch)) ||
      (s.countryOrigin && s.countryOrigin.toLowerCase().includes(lowerSearch)) ||
      (s.countryResidence && s.countryResidence.toLowerCase().includes(lowerSearch)) ||
      (s.studentClass && s.studentClass.toLowerCase().includes(lowerSearch))
    );
  }

  // --- Pagination ---
  const startIndex = (page - 1) * limit;
  const paginatedStudents = students.slice(startIndex, startIndex + parseInt(limit));

  res.json({
    total: students.length,
    page: parseInt(page),
    limit: parseInt(limit),
    students: paginatedStudents
  });
});

const { Parser } = require("json2csv");

// Download students as CSV
app.get("/export/csv", (req, res) => {
  if (!fs.existsSync(dataFile)) {
    return res.status(404).send("No student data available");
  }

  const students = JSON.parse(fs.readFileSync(dataFile));

  const fields = [
    "fullname",
    "dob",
    "age",
    "studentClass",
    "email",
    "countryOrigin",
    "countryResidence",
    "photo",
    "dateRegistered"
  ];

  const json2csv = new Parser({ fields });
  const csv = json2csv.parse(students);

  res.header("Content-Type", "text/csv");
  res.attachment("students.csv");
  return res.send(csv);
});

const express = require("express");
const multer = require("multer");
const fs = require("fs");
const cors = require("cors");
const { Parser } = require("json2csv");
const XLSX = require("xlsx");

const app = express();
const PORT = 5000;

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Multer setup for photo uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, "uploads/"),
  filename: (req, file, cb) => cb(null, Date.now() + "-" + file.originalname)
});
const upload = multer({ storage });

// Path for saving registered students
const dataFile = "./students.json";

// Serve uploaded photos
app.use("/uploads", express.static("uploads"));

// Helper: Save to JSON
function saveStudent(student) {
  let students = [];
  if (fs.existsSync(dataFile)) {
    students = JSON.parse(fs.readFileSync(dataFile));
  }
  students.push(student);
  fs.writeFileSync(dataFile, JSON.stringify(students, null, 2));
}

// Registration endpoint
app.post("/register", upload.single("photo"), (req, res) => {
  const { fullname, dob, age, class: studentClass, emailType, email, countryOrigin, countryResidence } = req.body;

  const studentData = {
    fullname,
    dob,
    age,
    studentClass,
    email,
    countryOrigin,
    countryResidence,
    photo: req.file ? req.file.filename : null,
    dateRegistered: new Date()
  };

  saveStudent(studentData);
  res.json({ success: true, message: "Student registered successfully", student: studentData });
});

// ðŸ“Œ Export as CSV
app.get("/export/csv", (req, res) => {
  if (!fs.existsSync(dataFile)) {
    return res.status(404).send("No student data available");
  }

  const students = JSON.parse(fs.readFileSync(dataFile));
  const fields = [
    "fullname",
    "dob",
    "age",
    "studentClass",
    "email",
    "countryOrigin",
    "countryResidence",
    "photo",
    "dateRegistered"
  ];

  const json2csv = new Parser({ fields });
  const csv = json2csv.parse(students);

  res.header("Content-Type", "text/csv");
  res.attachment("students.csv");
  return res.send(csv);
});

// ðŸ“Œ Export as Excel
app.get("/export/excel", (req, res) => {
  if (!fs.existsSync(dataFile)) {
    return res.status(404).send("No student data available");
  }

  const students = JSON.parse(fs.readFileSync(dataFile));

  const worksheet = XLSX.utils.json_to_sheet(students);
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, "Students");

  const buffer = XLSX.write(workbook, { type: "buffer", bookType: "xlsx" });

  res.header("Content-Disposition", "attachment; filename=students.xlsx");
  res.header("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
  res.send(buffer);
});

// âœ… Start server last
app.listen(PORT, () => console.log(`âœ… Server running at http://localhost:${PORT}`));

app.listen(PORT, () => console.log(`âœ… Server running at http://localhost:${PORT}`));



